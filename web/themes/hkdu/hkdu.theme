<?php

use Drupal\Core\Render\Element;
use Drupal\doctor\Entity\DoctorEntity;
use Drupal\hospital\Entity\HospitalEntity;
use Drupal\gallery\Entity\Gallery;
use Drupal\Core\Config\ConfigFactoryInterface;

/**
 * @file
 * Bootstrap sub-theme.
 *
 * Place your custom PHP code in this file.
 */

function hkdu_preprocess_html(&$variables) {
  $current_path = \Drupal::service('path.current')->getPath();
  $path = explode('/', $current_path);

  if ($path[1] == 'hkdu' && $path[2] == 'doctor' || $path[1] == 'hkdu' && $path[2] == 'hospital' || $path[1] == 'hkdu' && $path[2] == 'gallery' || $path[1] == 'e-pharm' && $path[2] == 'drug-search' && !empty($path[3]) || $path[1] == 'e-pharm' && empty($path[2]) || $path[1] == 'e-pharm' && $path[2] == 'pharm-dir' || $path[1] == 'e-pharm' && $path[2] == 'event' || $path[1] == 'cme' && $path[2] == 'events' || $path[1] == 'cme' && empty($path[2]) || $path[1] == 'cme' && $path[2] == 'event-org' && !empty($path[3]) || $path[1] == 'checkout' && $path[3] == 'order_information' || $path[1] == 'account' || $path[1] == 'user' && is_numeric($path[2]) || $path[1] == 'user' && is_numeric($path[2]) && $path[3] == 'edit' || $path[1] == 'report' && is_numeric($path[2])) {

    $variables['attributes']['class'][] = 'doctor-detail-page';
  }
  if ($path[1] == 'member-area' && empty($path[2])) {
    $variables['attributes']['class'][] = 'doctor-detail-page';
  }
  if ($path[1] == 'member-area' && $path[2] == 'event' && is_numeric($path[3])) {
    $variables['attributes']['class'][] = 'doctor-detail-page';
  }
  if ($path[1] == 'user' && $path[2] == 'login' || $path[1] == 'user' && $path[2] == 'reset' || $path[1] == 'user' && $path[2] == 'password') {
    $variables['attributes']['class'][] = 'page-user-login';
  }

  if ($path[1] == 'e-pharm' && empty($path[2])) {
    $variables['attributes']['class'][] = 'epharm-landing-page';
  }
  if ($path[1] == 'search' && $path[2] == 'clinic') {
    $variables['attributes']['class'][] = 'search-clinic-page';
  }
  if ($path[1] == 'e-pharm') {
    if (\Drupal::currentUser()->isAnonymous()) {
      $variables['attributes']['class'][] = 'epharm-no-login';
    }
  }

}

function hkdu_preprocess_page(&$variables) {
  $variables['#attached']['library'][] = 'hkdu/caption-hkdu';
}

function hkdu_preprocess_node(&$variables) {
  if ($variables['node']->getType() == 'image_gallery') {
    $variables['#attached']['library'][] = 'hkdu/lightbox-hkdu';
  }
}

/**
 * Implements hook_preprocess_menu().
 */
//function hkdu_preprocess_menu(&$variables, $hook) {
//    if ($hook == 'menu__main') { // We're doing that for main menu.
//        // Get the current path.
//        $current_path = \Drupal::request()->getRequestUri();
//        $items = $variables['items'];
//        foreach ($items as $key => $item) {
//            // If path is current_path, set active to li.
//            if ($item['url']->toString() == $current_path) {
//                // Add active link.
////dpm($variables);
//               // $item['title']
//            }
//        }
//    }
//}

function template_preprocess_about(array &$variables) {
  // Fetch DefaultEntity Entity Object.
  $about = $variables['elements']['#about'];
  $variables['about'] = $about;

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

function template_preprocess_news(array &$variables) {
  // Fetch NewsEntity Entity Object.
  $news = $variables['elements']['#news'];
  $variables['new'] = $news;
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

function template_preprocess_healthy(array &$variables) {
  // Fetch NewsEntity Entity Object.
  $news = $variables['elements']['#healthy'];
  $variables['healthy'] = $news;
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

function template_preprocess_media_entity(array &$variables) {
  // Fetch MediaEntity Entity Object.
  $media_entity = $variables['elements']['#media_entity'];
  $current_path = \Drupal::service('path.current')->getPath();
  $path = explode('/', $current_path);
  $id = $path[2];
  $variables['media'] = \Drupal\media_release\Entity\MediaEntity::load($id);
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

function template_preprocess_doctor(array &$variables) {
  // Fetch DoctorEntity Entity Object.
  $doctor = $variables['elements']['#doctor'];
  $current_path = \Drupal::service('path.current')->getPath();
  $path = explode('/', $current_path);
  $id = $path[2];
  $variables['doctor'] = DoctorEntity::load($id);
  $api_key = \Drupal::config('google_map_field.settings')->get('google_map_field_apikey');
  $elements = [];
  $element = [
    '#theme' => 'google_map_field_embed',
    '#name' => $doctor->get('field_clinic_location')->name,
    '#lat' => $doctor->get('field_clinic_location')->lat,
    '#lon' => $doctor->get('field_clinic_location')->lon,
    '#zoom' => $doctor->get('field_clinic_location')->zoom,
    '#type' => $doctor->get('field_clinic_location')->type,
    '#show_marker' => $doctor->get('field_clinic_location')->marker === "1" ? "true" : "false",
    '#show_controls' => $doctor->get('field_clinic_location')->controls === "1" ? "true" : "false",
    '#width' => $doctor->get('field_clinic_location')->width ? $doctor->get('field_clinic_location')->width : '320px',
    '#height' => $doctor->get('field_clinic_location')->height ? $doctor->get('field_clinic_location')->height : '200px',
    '#api_key' => $api_key,
  ];
  if (!empty($doctor->get('field_clinic_location')->infowindow)) {
    $element['#infowindow'] = [
      '#markup' => $doctor->get('field_clinic_location')->infowindow,
      '#allowed_tags' => allowedTags(),
    ];
  }

  $element['#attached']['library'][] = 'google_map_field/google-map-field-renderer';
  $element['#attached']['library'][] = 'google_map_field/google-map-apis';
  $variables['google_map'] = $element;
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

function allowedTags() {
  return [
    'div',
    'h1',
    'h2',
    'h3',
    'h4',
    'h5',
    'h6',
    'p',
    'span',
    'br',
    'em',
    'strong',
    'a',
    'img',
    'video',
    'ul',
    'ol',
    'li',
  ];
}

function template_preprocess_hospital(array &$variables) {
  // Fetch HospitalEntity Entity Object.
  $hospital = $variables['elements']['#hospital'];
  $current_path = \Drupal::service('path.current')->getPath();
  $path = explode('/', $current_path);
  $id = $path[3];
  $variables['hospital'] = HospitalEntity::load($id);
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

function template_preprocess_gallery(array &$variables) {
  // Fetch Gallery Entity Object.
  $gallery = $variables['elements']['#gallery'];
  $current_path = \Drupal::service('path.current')->getPath();
  $path = explode('/', $current_path);
  $id = $path[3];
  $variables['gallery'] = Gallery::load($id);
  $variables['#attached']['library'][] = 'hkdu/lightbox-hkdu';
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

function template_preprocess_clinical_focus(array &$variables) {
  // Fetch ClinicalFocus Entity Object.

  $current_path = \Drupal::service('path.current')->getPath();
  $path = explode('/', $current_path);
  $id = $path[3];
  $clinical_focus = \Drupal\clinical_focus\Entity\ClinicalFocus::load($id);
  $current_user = \Drupal::currentUser();
  $current_roles = $current_user->getRoles();
  $date = time();
  if ($date > $clinical_focus->get('field_expired')->value) {
    throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
  }
  $au = TRUE;
  if ($clinical_focus->get('field_audience')->getValue()) {

    foreach ($clinical_focus->get('field_audience')->getValue() as $audience) {
      if (!in_array($audience['value'], $current_roles)) {
        $au = FALSE;
      }
    }
    foreach ($clinical_focus->get('field_audience')->getValue() as $audience) {
      if (in_array($audience['value'], $current_roles)) {
        $au = TRUE;
      }
    }
    if (in_array('admins', $current_roles) || in_array('administrator', $current_roles)) {
      $au = TRUE;
    }

  }
  $user = $clinical_focus->getOwner();
  if (in_array('administrator', $current_roles)) {
    $au = TRUE;
  }
  if ($user->id() == $current_user->id()) {
    $au = TRUE;
  }
  if (!$au) {
    throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
  }

  $roles = $user->getRoles();
  if (in_array('drug_suppliers', $current_roles)) {
    if (in_array('drug_suppliers', $roles) && $current_user->id() != $user->id()) {
      throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
    }
  }
  $variables['clinical_focus'] = $clinical_focus;
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

function template_preprocess_drug_news(array &$variables) {
  // Fetch DrugNews Entity Object.

  $current_path = \Drupal::service('path.current')->getPath();
  $path = explode('/', $current_path);
  $id = $path[3];
  $drug_news = \Drupal\drug_news\Entity\DrugNews::load($id);
  $current_user = \Drupal::currentUser();
  $current_roles = $current_user->getRoles();
  $date = time();
  if ($date > $drug_news->get('field_expired')->value) {
    throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
  }

  if ($drug_news->get('field_audience')->getValue()) {

    $au = TRUE;
    foreach ($drug_news->get('field_audience')->getValue() as $audience) {
      if (!in_array($audience['value'], $current_roles)) {
        $au = FALSE;
      }
    }
    foreach ($drug_news->get('field_audience')->getValue() as $audience) {
      if (in_array($audience['value'], $current_roles)) {
        $au = TRUE;
      }
    }
    if (in_array('admins', $current_roles) || in_array('administrator', $current_roles)) {
      $au = TRUE;
    }

  }
  $user = $drug_news->getOwner();
  if (in_array('administrator', $current_roles)) {
    $au = TRUE;
  }
  if ($user->id() == $current_user->id()) {
    $au = TRUE;
  }

  if (!$au) {
    throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
  }
  $roles = $user->getRoles();
  if (in_array('drug_suppliers', $current_roles)) {
    if (in_array('drug_suppliers', $roles) && $current_user->id() != $user->id()) {
      throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
    }
  }
  $variables['drug_news'] = $drug_news;
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

function template_preprocess_special_offer(array &$variables) {
  // Fetch SpecialOffer Entity Object.
  $current_path = \Drupal::service('path.current')->getPath();
  $path = explode('/', $current_path);
  $id = $path[3];
  $special_offer = \Drupal\special_offer\Entity\SpecialOffer::load($id);
  $current_user = \Drupal::currentUser();
  $current_roles = $current_user->getRoles();
  if ($special_offer->get('field_audience')->getValue()) {
    $au = TRUE;
    foreach ($special_offer->get('field_audience')->getValue() as $audience) {
      if (!in_array($audience['value'], $current_roles)) {
        $au = FALSE;
      }
    }
    foreach ($special_offer->get('field_audience')->getValue() as $audience) {
      if (in_array($audience['value'], $current_roles)) {
        $au = TRUE;
      }
    }
    if (in_array('admins', $current_roles) || in_array('administrator', $current_roles)) {
      $au = TRUE;
    }

  }
  $user = $special_offer->getOwner();
  if (in_array('administrator', $current_roles)) {
    $au = TRUE;
  }
  if ($user->id() == $current_user->id()) {
    $au = TRUE;
  }
  if (!$au) {
    throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
  }
  $roles = $user->getRoles();
  if (in_array('drug_suppliers', $current_roles)) {
    if (in_array('drug_suppliers', $roles) && $current_user->id() != $user->id()) {
      throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
    }
  }
  $variables['special_offer'] = $special_offer;
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

function template_preprocess_event(array &$variables) {
  // Fetch Event Entity Object.
  $current_path = \Drupal::service('path.current')->getPath();
  $path = explode('/', $current_path);
  $id = $path[3];
  $event = \Drupal\event\Entity\Event::load($id);
  $current_user = \Drupal::currentUser();
  $current_roles = $current_user->getRoles();
  $date = time();
  if ($date > $event->get('field_expired')->value) {
    throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
  }
  if ($event->get('field_audience')->getValue()) {
    $au = TRUE;
    foreach ($event->get('field_audience')->getValue() as $audience) {
      if (!in_array($audience['value'], $current_roles)) {
        $au = FALSE;
      }
    }
    foreach ($event->get('field_audience')->getValue() as $audience) {
      if (in_array($audience['value'], $current_roles)) {
        $au = TRUE;
      }
    }
    if (in_array('admins', $current_roles) || in_array('administrator', $current_roles)) {
      $au = TRUE;
    }

  }
  $user = $event->getOwner();
  if (in_array('administrator', $current_roles)) {
    $au = TRUE;
  }
  if ($user->id() == $current_user->id()) {
    $au = TRUE;
  }
  if (!$au) {
    throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
  }
  $roles = $user->getRoles();
  if (in_array('drug_suppliers', $current_roles)) {
    if (in_array('drug_suppliers', $roles) && $current_user->id() != $user->id()) {
      throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
    }
  }
  $variables['event'] = $event;
  $variables['product'] = getProduct($id);
  $variables['check_event'] = checkEventStatusUser($id);
  $variables['payment_upload'] = checkEventUpload($id);
  $variables['expired'] = checkExpiredEvent($event);
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

function template_preprocess_drug_search(array &$variables) {
  // Fetch DrugSearch Entity Object.
  $current_path = \Drupal::service('path.current')->getPath();
  $path = explode('/', $current_path);
  $id = $path[3];
  $drug_search = \Drupal\drug_search\Entity\DrugSearch::load($id);
  $current_user = \Drupal::currentUser();
  $current_roles = $current_user->getRoles();
  $date = time();
  if ($date > $drug_search->get('field_expired')->value) {
    throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
  }
  if ($drug_search->get('field_audience')->getValue()) {
    $au = TRUE;
    foreach ($drug_search->get('field_audience')->getValue() as $audience) {
      if (!in_array($audience['value'], $current_roles)) {
        $au = FALSE;
      }
    }
    foreach ($drug_search->get('field_audience')->getValue() as $audience) {
      if (in_array($audience['value'], $current_roles)) {
        $au = TRUE;
      }
    }
    if (in_array('admins', $current_roles) || in_array('administrator', $current_roles)) {
      $au = TRUE;
    }

  }
  $user = $drug_search->getOwner();
  if (in_array('administrator', $current_roles)) {
    $au = TRUE;
  }
  if ($user->id() == $current_user->id()) {
    $au = TRUE;
  }
  if (!$au) {
    throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
  }
  $roles = $user->getRoles();
  if (in_array('drug_suppliers', $current_roles)) {
    if (in_array('drug_suppliers', $roles) && $current_user->id() != $user->id()) {
      throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
    }
  }
  $variables['drug_search'] = $drug_search;
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

function template_preprocess_pharm_dir(array &$variables) {
  // Fetch PharmDir Entity Object.

  $current_path = \Drupal::service('path.current')->getPath();
  $path = explode('/', $current_path);
  $id = $path[3];
  $pharm_dir = \Drupal\pharm_dir\Entity\PharmDir::load($id);
  $current_user = \Drupal::currentUser();
  $current_roles = $current_user->getRoles();
  if ($pharm_dir->get('field_audience')->getValue()) {
    $au = TRUE;
    foreach ($pharm_dir->get('field_audience')->getValue() as $audience) {
      if (!in_array($audience['value'], $current_roles)) {
        $au = FALSE;
      }
    }
    foreach ($pharm_dir->get('field_audience')->getValue() as $audience) {
      if (in_array($audience['value'], $current_roles)) {
        $au = TRUE;
      }
    }
    if (in_array('admins', $current_roles) || in_array('administrator', $current_roles)) {
      $au = TRUE;
    }

  }
  $user = $pharm_dir->getOwner();
  if (in_array('administrator', $current_roles)) {
    $au = TRUE;
  }
  if ($user->id() == $current_user->id()) {
    $au = TRUE;
  }
  if (!$au) {
    throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
  }
  $roles = $user->getRoles();
  if (in_array('drug_suppliers', $current_roles)) {
    if (in_array('drug_suppliers', $roles) && $current_user->id() != $user->id()) {
      throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
    }
  }
  $variables['pharm_dir'] = $pharm_dir;
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

function template_preprocess_cme_event(array &$variables) {
  // Fetch Event Entity Object.
  $current_path = \Drupal::service('path.current')->getPath();
  $path = explode('/', $current_path);
  $id = $path[3];
  $event = \Drupal\cme_event\Entity\CmeEvent::load($id);
  $current_user = \Drupal::currentUser();
  $current_roles = $current_user->getRoles();
  $date = time();
  $expired = strtotime($event->get('field_expired')->value);
  if ($date > $expired) {
    throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
  }
  if ($event->get('field_audience')->getValue()) {
    $au = TRUE;
    foreach ($event->get('field_audience')->getValue() as $audience) {
      if (!in_array($audience['value'], $current_roles)) {
        $au = FALSE;
      }
    }
    foreach ($event->get('field_audience')->getValue() as $audience) {
      if (in_array($audience['value'], $current_roles)) {
        $au = TRUE;
      }
    }
    if (in_array('admins', $current_roles) || in_array('administrator', $current_roles)) {
      $au = TRUE;
    }

  }
  $user = $event->getOwner();
  if (in_array('administrator', $current_roles)) {
    $au = TRUE;
  }
  if ($user->id() == $current_user->id()) {
    $au = TRUE;
  }
  if (!$au) {
    throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
  }
  $roles = $user->getRoles();
  if (in_array('drug_suppliers', $current_roles)) {
    if (in_array('drug_suppliers', $roles) && $current_user->id() != $user->id()) {
      throw new \Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException();
    }
  }
  $variables['event'] = $event;
  $variables['product'] = getCmeProduct($id);
  $variables['check_event'] = checkCmeEventStatusUser($id);
  $variables['expired'] = checkExpiredCmeEvent($event);
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

function template_preprocess_event_org(array &$variables) {
  // Fetch EventOrg Entity Object.
  $current_path = \Drupal::service('path.current')->getPath();
  $path = explode('/', $current_path);
  $id = $path[3];
  $event_org = \Drupal\cme_event_organizer\Entity\EventOrg::load($id);
  $variables['event_org'] = $event_org;
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}

function template_preprocess_guidelines(array &$variables) {
  // Fetch Guidelines Entity Object.
  $current_path = \Drupal::service('path.current')->getPath();
  $path = explode('/', $current_path);
  $id = $path[3];
  $event_org = \Drupal\cme_guidelines\Entity\Guidelines::load($id);
  $variables['cme_guidelines'] = $event_org;
  // Helpful $content variable for templates.
  //    foreach (Element::children($variables['elements']) as $key) {
  //        $variables['content'][$key] = $variables['elements'][$key];
  //    }
}

function template_preprocess_quiz(array &$variables) {
  // Fetch Quiz Entity Object.
  $current_path = \Drupal::service('path.current')->getPath();
  $path = explode('/', $current_path);
  $id = $path[3];
  $user = \Drupal::currentUser();
  $quiz = \Drupal\cme_quiz\Entity\Quiz::load($id);
  $variables['quiz'] = $quiz;
  $variables['check_quiz'] = checkQuizStatusUser($id);
  $variables['expired'] = checkExpiredQuiz($quiz);
  $variables['question'] = getQuestionNoTest($quiz);
  $variables['result'] = FALSE;
  $variables['results'] = FALSE;
  $variables['roles'] = NULL;
  $variables['product'] = getQuizProduct($id);
  $variables['paid'] = getUserPaidQuiz($id);
  $roles = $user->getRoles();
  $variables['att'] = getUserAttempQuiz($id);
  if (in_array('administrator', $roles)) {
    $variables['roles'] = TRUE;
  }
  if (in_array('hkdu_members', $roles)) {
    $variables['roles'] = TRUE;
  }
  if (in_array('cme_member', $roles)) {
    $variables['roles'] = TRUE;
  }
  if (in_array('doctor', $roles)) {
    $variables['roles'] = NULL;
  }
  if (getLastestresult($id)) {
    $variables['result'] = getLastestresult($id);
  }
  if (getListResult($id)) {
    $variables['results'] = getListResult($id);
  }
  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
  $variables['#cache'] = [
    'max-age' => 0,
  ];
}

/**
 * Prepares variables for comment templates.
 *
 * Default template: comment.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An associative array containing the comment and entity objects.
 *     Array keys: #comment, #commented_entity.
 */
function hkdu_preprocess_comment(&$variables) {
  /** @var \Drupal\Core\Datetime\DateFormatterInterface $date_formatter */
  $date_formatter = \Drupal::service('date.formatter');
  /** @var \Drupal\comment\CommentInterface $comment */
  $comment = $variables['elements']['#comment'];
  $commented_entity = $comment->getCommentedEntity();
  $variables['comment'] = $comment;
  $variables['commented_entity'] = $commented_entity;
  $variables['threaded'] = $variables['elements']['#comment_threaded'];

  $account = $comment->getOwner();
  $username = [
    '#theme' => 'username',
    '#account' => $account,
  ];
  $variables['author'] = \Drupal::service('renderer')->render($username);
  $variables['author_id'] = $comment->getOwnerId();
  $variables['new_indicator_timestamp'] = $comment->getChangedTime();
  $variables['created'] = $date_formatter->format($comment->getCreatedTime());
  // Avoid calling DateFormatterInterface::format() twice on the same timestamp.
  if ($comment->getChangedTime() == $comment->getCreatedTime()) {
    $variables['changed'] = $variables['created'];
  }
  else {
    $variables['changed'] = $date_formatter->format($comment->getChangedTime());
  }

  if (theme_get_setting('features.comment_user_picture')) {
    // To change user picture settings (for instance, image style), edit the
    // 'compact' view mode on the User entity.
    $variables['user_picture'] = '';
  }
  else {
    $variables['user_picture'] = '';
  }

  if (isset($comment->in_preview)) {
    $variables['title'] = Link::fromTextAndUrl($comment->getSubject(), Url::fromRoute('<front>'))->toString();
    $variables['permalink'] = '';
  }
  else {
    $uri = $comment->permalink();
    $attributes = $uri->getOption('attributes') ?: [];
    $attributes += ['class' => ['permalink'], 'rel' => 'bookmark'];
    $uri->setOption('attributes', $attributes);
    $variables['title'] = Link::fromTextAndUrl($comment->getSubject(), $uri)->toString();

    $variables['permalink'] = '';
  }

  $variables['submitted'] = t('Submitted by @username on @datetime', ['@username' => $variables['author'], '@datetime' => $variables['created']]);

  if ($comment_parent = $comment->getParentComment()) {
    // Fetch and store the parent comment information for use in templates.
    $account_parent = $comment_parent->getOwner();
    $variables['parent_comment'] = $comment_parent;
    $username = [
      '#theme' => 'username',
      '#account' => $account_parent,
    ];
    $variables['parent_author'] = \Drupal::service('renderer')->render($username);
    $variables['parent_created'] = $date_formatter->format($comment_parent->getCreatedTime());
    // Avoid calling DateFormatterInterface::format() twice on same timestamp.
    if ($comment_parent->getChangedTime() == $comment_parent->getCreatedTime()) {
      $variables['parent_changed'] = $variables['parent_created'];
    }
    else {
      $variables['parent_changed'] = $date_formatter->format($comment_parent->getChangedTime());
    }
    $permalink_uri_parent = $comment_parent->permalink();
    $attributes = $permalink_uri_parent->getOption('attributes') ?: [];
    $attributes += ['class' => ['permalink'], 'rel' => 'bookmark'];
    $permalink_uri_parent->setOption('attributes', $attributes);
    $variables['parent_title'] = Link::fromTextAndUrl($comment_parent->getSubject(), $permalink_uri_parent)->toString();
    $variables['parent_permalink'] = '';
    $variables['parent'] = t('In reply to @parent_title by @parent_username',
      ['@parent_username' => $variables['parent_author'], '@parent_title' => $variables['parent_title']]);
  }
  else {
    $variables['parent_comment'] = '';
    $variables['parent_author'] = '';
    $variables['parent_created'] = '';
    $variables['parent_changed'] = '';
    $variables['parent_title'] = '';
    $variables['parent_permalink'] = '';
    $variables['parent'] = '';
  }

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  // Set status to a string representation of comment->status.
  if (isset($comment->in_preview)) {
    $variables['status'] = 'preview';
  }
  else {
    $variables['status'] = $comment->isPublished() ? 'published' : 'unpublished';
  }

  // Add comment author user ID. Necessary for the comment-by-viewer library.
  $variables['attributes']['data-comment-user-id'] = $comment->getOwnerId();
  // Add anchor for each comment.
  $variables['attributes']['id'] = 'comment-' . $comment->id();
}

